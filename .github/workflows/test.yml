name: Test

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        archive_url:
          - https://ftp.nluug.nl/pub/graphics/blender/release/Blender2.83/blender-2.83.12-windows64.zip
          - https://ftp.nluug.nl/pub/graphics/blender/release/Blender2.91/blender-2.91.2-windows64.zip
    steps:
      - uses: actions/checkout@v2
      - name: Cache archive
        id: cache-archive
        uses: actions/cache@v2
        with:
          path: blender.zip
          key: ${{ matrix.archive_url }}-archive-3
      - name: Download archive
        if: steps.cache-archive.outputs.cache-hit != 'true'
        run: Invoke-WebRequest -Uri "${{ matrix.archive_url }}" -OutFile blender.zip
      - name: Test
        run: |
          Expand-Archive -LiteralPath blender.zip -DestinationPath "$env:TEMP\blender"
          & "$env:TEMP\blender\*\blender.exe" --background -noaudio --python-exit-code 1 --python scripts\unittest_discover.py
      - name: Archive failed io test result
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: VRMs
          path: ./tests/vrm/temp

  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        archive_url:
          - https://ftp.nluug.nl/pub/graphics/blender/release/Blender2.83/blender-2.83.12-macOS.dmg
          - https://ftp.nluug.nl/pub/graphics/blender/release/Blender2.91/blender-2.91.2-macOS.dmg
    steps:
      - uses: actions/checkout@v2
      - name: Cache archive
        id: cache-archive
        uses: actions/cache@v2
        with:
          path: blender.dmg
          key: ${{ matrix.archive_url }}-archive-3
      - name: Download archive
        if: steps.cache-archive.outputs.cache-hit != 'true'
        run: curl -fsLS "${{ matrix.archive_url }}" -o blender.dmg
      - name: Test
        run: |
          hdiutil attach blender.dmg
          cp -fr /Volumes/Blender/Blender.app /Applications
          hdiutil detach $(mount -t hfs | grep '/Volumes/Blender' | awk '{print $1}')
          /Applications/Blender.app/Contents/MacOS/blender --background -noaudio --python-exit-code 1 --python scripts/unittest_discover.py
      - name: Archive failed io test result
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: VRMs
          path: ./tests/vrm/temp

  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Install deb packages
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y clang-format glslang-tools nkf python3 shellcheck uchardet
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2
      - name: Disable git config core.quotepath
        run: git config core.quotepath off
      - name: Check file permissions
        run: |
          git ls-files ':!scripts/'  | while read -r f; do
            echo $f
            if [ -x "$f" ]; then
              echo "$f has unnecessary executable permission."
              exit 1
            fi
          done
          git ls-files scripts/ | while read -r f; do
            echo $f
            if [ ! -x "$f" ]; then
              echo "$f has no executable permission."
              exit 1
            fi
          done
      - name: Check file name character encoding
        run: |
          git ls-files | while read -r f; do
            encoding=$(echo "$f" | uchardet)
            if [ "$encoding" != "ASCII" ]; then
              echo "$f is not ascii file name but $encoding."
              exit 1
            fi
          done
      - name: Check file content character encoding
        run: |
          git ls-files | while read -r f; do
            encoding=$(file --brief --mime-encoding "$f")
            case "$encoding" in
              binary)
                file "$f"
                ;;
              us-ascii | utf-8)
                case "$f" in
                  *.bat)
                    nkf -w -Lw -Z1 --in-place "$f"
                    ;;
                  *)
                    nkf -w -Lu -Z1 --in-place "$f"
                    ;;
                esac
                ;;
              *)
                echo "$f is not ascii nor utf-8 but $encoding."
                exit 1
                ;;
            esac
          done
          git diff --exit-code
      - name: Check whitelist.txt ordering
        run: LC_ALL=C sort whitelist.txt | diff -u whitelist.txt -
      - name: Validate GLSL
        run: |
          git ls-files "**.glsl" | while read -r orig; do
            echo "$orig"
            versioned="/tmp/$(basename "$orig")"
            echo "#version 330" > "$versioned"
            cat "$orig" >> "$versioned"
            glslangValidator "$versioned"
          done
      - name: Shellcheck
        run: shellcheck $(git ls-files "*.sh")
      - name: Format GLSL (May break syntax!)
        run: |
          clang-format -style="{BasedOnStyle: Chromium, IndentWidth: 4}" -i $(git ls-files "**.glsl")
          git diff --exit-code
      - name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Install poetry dependencies
        run: poetry install
      - name: Check source code formatting
        run: poetry run black --check --diff $(git ls-files "*.py")
      - name: Pylint
        run: |
          poetry remove fake-bpy-module-2.82 # pylint and fake-bpy-module are incompatible
          poetry run pylint $(git ls-files "*.py")
          git checkout .
          poetry install
      - name: Mypy
        run: poetry run mypy --show-error-code $(git ls-files "*.py")
      - name: Flake8
        run: poetry run flake8 --count --show-source --statistics $(git ls-files "*.py")
      - name: Check import sorting order
        run: |
          poetry run isort $(git ls-files "*.py")
          poetry run black $(git ls-files "*.py")
          git diff --exit-code
